// Code generated by dagger-compiler.  Do not edit.
package com.studySnake.snake;


import dagger.internal.Binding;
import dagger.internal.ModuleAdapter;
import java.util.Map;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class BaseApplication$MyModule$$ModuleAdapter extends ModuleAdapter<com.studySnake.snake.BaseApplication.MyModule> {
  private static final String[] INJECTS = { "members/com.studySnake.snake.BaseActivity", "members/com.studySnake.snake.BaseFragment", "members/com.studySnake.snake.LoginFragment", "members/com.studySnake.snake.Login", "members/com.studySnake.snake.model.BaseManager", "members/com.studySnake.snake.model.UserManager", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public BaseApplication$MyModule$$ModuleAdapter() {
    super(INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, false /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(Map<String, Binding<?>> map) {
    map.put("com.squareup.otto.Bus", new ProvideBusProvidesAdapter(module));
  }

  /**
   * A {@code Binder<com.squareup.otto.Bus>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.squareup.otto.Bus>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideBusProvidesAdapter extends Binding<com.squareup.otto.Bus>
      implements Provider<com.squareup.otto.Bus> {
    private final com.studySnake.snake.BaseApplication.MyModule module;

    public ProvideBusProvidesAdapter(com.studySnake.snake.BaseApplication.MyModule module) {
      super("com.squareup.otto.Bus", null, IS_SINGLETON, "com.studySnake.snake.BaseApplication.MyModule.provideBus()");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.squareup.otto.Bus>}.
     */
    @Override
    public com.squareup.otto.Bus get() {
      return module.provideBus();
    }
  }
}
